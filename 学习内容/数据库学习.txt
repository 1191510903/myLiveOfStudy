redis学习
开启：redis-server redis-conf
	  redis-cli开启客户端

数据类型：string(字符串)、list(链表)、set（集合）【zset】、sorted set（有序集合）、hash（哈希类型）
配合关系型数据库做告诉缓存

最新N个数据-------------通过List实现按自然时间排序的数据
排行榜------------------利用zset（有序集合）
失效性的数据------------expire过期
计数器，秒杀------------原子性，自增方法incr、decr
去除大量数据中的重复数据-利于set集合
构建队列----------------利用list集合
发布订阅消息系统--------pub/sub模式

redis-benchmark：性能测试工具，可以再自己本子运行，看看性能如何（服务启动起来后执行）
redis-check-aof：修复有问题的aof文件
redis-check-dump:修复有问题的dump.rdb文件
redis-sentinel：Redis集群使用
redis-server：Redis服务器启动命令
redis-cli:客户端，操作入口
------------------------------------------------
redis是单线程+多路IO复用技术
阻塞IO：
非阻塞IO：
IO多路复用：select（限制数量） poll（监视不限数量） epoll(设置标识符)
多路IO复用技术是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll
函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后
进行真正的操作可以在同一个线程里执行，也可以启动线程执行（线程池）
-----------------------------------------------

------------------------------------------------
默认使用0号部数据库（总共16个）
select + num 换数据存储部

exit/ctrl+C  退出(关闭客户端)
ping 查看是否连接成功 返回pong成功
shutdown/redis-cli shutdown关闭服务端


redis数据类型  ====redis中只能存字符串
		string
		set
key  +  list
		hash
		zset
		
		keys * 查看所有键
		exists 判断键是否存在
		type   判断键中值的类型
		del 	删除键
		expire 设置过期时间 expire a 10 
		ttl 	查看还有多少秒过期  -1代表永不过期，-2代表已经过期
		dbsize 	查看所在表中的值数量
		Flushdb 清空当前库----}
								尽量不用！！
		Flushall 通杀全部库---}
------------------------------------------------		
String	
	string 不能超过512M
		get 获取键的值
		append 追加
		strlen 获取值的长度
		setnx NULL赋值 不为null不赋值（分布式锁中出现）
		incr  将key中存储的数字值增1
		decr  将key中存储的数字值减1
		incrby/decrby  将key中存储的数字值增/减长度
		mset <key1> <value1> <key2><value2>  同时设置多个值
		mget <key1><value1>  <key2><value2>  同时获取多个值
		msetnx 当且仅当都不存在时设置值
		getrange  获取值的范围  类似substring但是【】
		setrange  覆盖值的范围  set a 5 abc
		setex 设置值的同时，设置过期时间  setex a 10 b
		getset 设置了新值的同时获取旧值
		
		1成功 0失败 原子性
		mset user:1:name zhangsan user:1:age 2
		mget user:1:name

------------------------------------------------------		
		
List：从头到尾是0，1，2，3 从尾到头 -1，-2，-3，-4，-5
		头0 ， 尾 -1
	redis列表是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部或者尾部
	
	lpush key value1 value2 从左边/右边插入一个或多个值
	rpush key value1 value2 
	lpop/rpop key 1.从左边/右边吐出一个值 2.值在键在，值光键亡
	rpoplpush key1 key2  将右边的值吐出来给另一个的左边插入值
	lrange key <start> <stop> 按照索引下标获取元素（从左边到右边） lrange 0 -1 查询所有
	lindex key <index> 索引获得元素
	llen key 获取列表长度
	linsert  key after value newValue 在value后面插入新值 
	lrem key n <value> 从左边删除n个value  n=0 删除所有 
	ltrim  list 1 2 裁剪出
---------------------------------------------------
set（集合）
set中的值是不能重复的
sadd key value 添加值
smember key 查看值
sismember 是否存在某个值
scard 获取集合中的个数
srem key value 删除
srandMemeber 随机抽选元素
spop 随机删除元素
smove myset myset1 hello 把myset中hello放入到myset1中
差集
交集
并集
sdiff key1 key2
sinter key1 key2
sunion key1 key2
无序不重复

-------------------------------------------------
hash 哈希类型
map集合 key-map集合 

hset 设置·一个字段值
hset set1 1 2 3 5 设置多个字段值
hget 获取一个字段值
hmset 
hmget 
hgetall
hdel 删除键值对
hexists 是否存在某个值
hkeys myhash
hkeys myhash
127.0.0.1:6379> hvals  myhash
1) "word"
127.0.0.1:6379> hsetnx myhash field3 hello
(integer) 1
127.0.0.1:6379> hsetnx myhash field4 hello

更适合存储对象

------------------------------------------------
zset 有序集合
zset myset score k1  score k2 score k3
127.0.0.1:6379> zadd myset 1 one  添加单个值
(integer) 1
127.0.0.1:6379> zadd myset 2 two 3 three 添加多个值
zadd zset1 60 v1 70 v2 80 v3

zrange 0 -1 查看范围
 zrangebyscore zset1 -inf +inf withscore
 从负无穷到正无穷（带key）
 -inf +inf 可以设置具体的数字
 
 zrem zset1 key 移出
 zcard zset1 集合数量
 zrevrange zset1 0 -1 从大到小查询
 zcount myset1 1 3 获取集合范围值的数量

------------------------------------------------

原子性
	不会被线程打断/中断只能发生于指令之间
------------------------------------------------
geospatial  
	可以推算地理位置的信息，两地之间的句丽
	geoadd
		添加地理位置
	两级无法直接添加
	geopos 
		获取指定的经度纬度
	geodist key loaction1 loaction2 单位
		获取两个位置的实际距离
	georadius
	功能：获得所有附近的人的地址、距离，通过半径来查询
	georadius china:city 110 30 1000 km withcoord 		withdist      count 2 
									 精度   经纬度 显示离中心距离的位置 显示数量
    geohash 将二维的经纬度转换为一维的字符串
	如果两个字符串越接近，那么距离越近
	geo底层是zset 可以用其操作集合
	zrange china:city 0 -1 查看所有信息
---------------------------------------------------
hyperloglog
	什么是基数
		不重复的元素
	基数统计的算法
	占用的内存是固定的，2^64不同的元素的技术，只需要12kb内存
	pfadd mykey a b c d  添加一个key
	pfcount mykey  统计key的数量
	pfmerge  mykey mykey2 求两个集合的并集
	
	如果允许容错，那么一定可以使用hyperloglog
	如果不允许容错，那么使用set或者自己的数据类即可
----------------------------------------------------
bitmaps 
	位存储
	统计用户信息，活跃，不活跃！登录，未登录！
	打卡，365打卡！两个状态都可以使用bitmaps！
	bitmaps位图，数据结构，都是操作二进制来进行记录，就只有0和1两个状态
	365=365bit 8bit=1字节
	setbit
	getbit
	bitcount 统计为1的数量
----------------------------------------------------
事务
	要么同时成功，要么同时失败，原子性
	
	redis单条命令式保存原子性，但是事务不保证原子性
	
	一组命令的集合，一个事务中的所有命令都被序列化，
	在事务执行过程中，会按照顺序在执行
	redis事务中没有隔离级别的概念
	所有的命令在事务中，并没有直接执行，只有发起执行命令才会执行
	redis的事务
		开启事务
		命令入队  multi
		执行事务

127.0.0.1:6379> multi
OK
//命令入队
127.0.0.1:6379> set k1 v1
QUEUED
127.0.0.1:6379> set k2 v2
QUEUED
127.0.0.1:6379> get k2
QUEUED
127.0.0.1:6379> set k3 k3
QUEUED
127.0.0.1:6379> exec

127.0.0.1:6379> multi
OK
127.0.0.1:6379> set k1 v1
QUEUED
127.0.0.1:6379> set k2 v2
QUEUED
//取消事务
127.0.0.1:6379> discard
OK
127.0.0.1:6379> get k1
(nil)

命令出错  --事务所有的命令不执行
运行时错误时

悲观锁
	很悲观，什么时候都会出现问题，无论什么时候都会加锁
乐观锁
	不会上锁，更新数据的时候去判断，再此期间是否有人修改过数据
	mysql(version)!
redis测监视测试
127.0.0.1:6379> watch money
OK
127.0.0.1:6379> multi
OK
127.0.0.1:6379> decrby money 20
QUEUED
127.0.0.1:6379> INCRBY out 20
QUEUED
127.0.0.1:6379> exec

测试多线程修改值，使用watch可以当作redis的乐观锁的操作
unwatch  解除控制
watch是一次性

---------------------------------------------------------

springboot整合
	使用jedis pool连接池  bio
	lettuce :采用netty，实例可以在多个线程中进行共享
	opsForValue 操作string
	opsForSet
	opsForGeo
	opsForZset
	opsForHash
	opsForHyperLogLog
	//常用的操作
	
	获取redis的连接对象
	RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();
		connection.flushDb();
		connection.flushAll();

	默认的序列化的方式是
	所有的对象需要序列化
	
	真实的开发中，公司自己封装redis
	
------------------------------------------------------
	usr:	unix software resource
-------------------------------------------
redis.conf
1.配置单位unit单位对大小写不敏感
2.可以包含其他的配置文件
3.bind 绑定的ip
protected-mode yes 保护模式
port 端口
通用
genetal
daemonize yes 守护线程的方式运行

日志
loglevel notice
logfile 日志的文件位置名
database 16 数据库的数量，默认是16
always-show-log yes 是否总是显示logo

快照
redis是内存数据库，如果没有持久化，断电即失
save 900 1 
900s内 
config set requirepass 123456
设置密码，默认是没有密码
auth 123456登录
config get requirepass得到所有的密码
-------------------------
rdb 保存的是dump.rdb的文件
	触发机制：
		1.save 的规则满足情况下，会自动触发rdb规则
		2.执行flushall
		3.退出redis
	自动生成dump.rdb
	优点：1.适合大规模的数据恢复！
	2.对数据的完整性要求不高
	缺点：
	1.需要一定的时间间隔进程！如果redis意外宕机，最后一次修改数据就没有了
	2.fork进程时，会占用一定内存空间
aof
将我们所有命令都记录下来
以日志的形式来记录每个写操作
默认是不开启的，我们需要手动配置appendonly 改为yes
生成appendonly.aof
aof被破坏不能启动redis
redis-check-aof --fix appendonly.aof 修复日志文件
	优点：
		1。每一次修改都同步，文件的完整会更好
		2.每秒同步一次，可能会丢失一秒的数据
		3.从不同步，效率最高
	缺点：
		1.相当于数据文件来说，aof远远大于rdb，修复的速度也比rdf慢！
		2.aof运行效率也要比rdb慢，所有我们redis默认配置是rdb持久化！

	追加覆盖，数据库恢复
	文件追加方式==》导致文件越来越大
	rewrite 重写  优化重写+覆盖
	fork 重写（优化）文件 rename覆盖 
	哪个好
		官方推荐同时使用
		数据不敏感使用rdb
		不建议单独使用aof，出现bug
		如果纯内存缓存，可以都不用
----------------------------------------
redis 发布订阅
发送者pub发送消息，订阅者(sub)接收信息
第一个：消息发送者，第二个：频道，第三个：消息接收者

订阅端：subscribe zhang
	等待读取推送信息
发送端：publish zhang "hello word"
	发送信息
	
	1.实时消息系统！
	2.实时聊天
	3.订阅，关注系统
	复杂一点使用 中间件
----------------------------------------
Redis 主从复制
	1主人 2仆人（1主2从）
	单向数据流
	
	主从复制作用：
		1.数据冗余
		2.故障恢复
		3.负载均衡
		4.高可用（集群）
	单台服务器内存不要超过20g
环境配置
	只配置从库

--------------info replication
# Replication
role:master
connected_slaves:0
master_replid:5c6996d0d55f238f767d17463ac7d15cbc279800
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

1.端口名
2.pid名（PID代表了各进程的进程ID,PID就是各进程的身份标识）
3.log文件名字
4.dump名
[root@192 bin]# ps -ef|grep redis
happy      4834      1  0 06:51 ?        00:00:03 redis-server 127.0.0.1:6379
root       5460      1  0 07:26 ?        00:00:00 redis-server 127.0.0.1:6380
root       5480      1  0 07:27 ?        00:00:00 redis-server 127.0.0.1:6381

------------------salveof no one自己当老大，如果老大自己重启需要自己重新配置

细节：
	主机可以写，从机不能写只能读
		
	层层链路
------------------------
哨兵模式
sentinel moitor myredis 127.0.0.1 6379 1

如果主机回来了，会自动充当主机

优点：
	1.哨兵集群，基于主从复制模式，所有的主从配置优点，它全有
	2.主从可以切换，故障可以转移，
	3.哨兵模式就是主从模式的升级，手动到自动，更加健壮
缺点：
	1.redis不好扩容，集群容量一旦到达上限，在线扩容十分麻烦
	2.配置复杂
--------------------------
redis缓存穿透和雪崩（服务高可用）
	缓存击穿：热点，量太大，缓存过期  热点数据不过期/分布式锁
	缓存穿透：  布隆过滤器/空对象
	缓存雪崩：redis 宕机，缓存集中过期
	解决方案：1。异地多活，增加服务器
	2.限流降级，缓存失效后，加锁或者队列 控制读数据库写缓存的线程数量
	3.数据预热：预先访问，找到热点，提前加入缓存
		
	



	
	
连接外网首先有在redis.conf改几个设置
1.daemonize yes
2.注释 bind 127.0.0.1
3.protected-mode no
其次看一下自己防火墙对端口号开没开放
firewall-cmd --query-port=6379/tcp
如果是yes就是开放的
然后 redis-server lconfig/redis.conf
redis-cli -h 自己外网端口号 -p 6379
最后ping一下如果pong就成功了
		
	
	
 
		
		

		